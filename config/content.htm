<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323103">https://github.com/mdecp2024/hw-41323103</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323103/content/About.html">https://mdecp2024.github.io/hw-41323103/content/About.html</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/T_18lc1M9ro?si=Hh0x82a4CPKjZvcg" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p>題目一：</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="385" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/tkTJjzOkxOI" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一: 41323103" width="716"></iframe></p>
<p>題目二：</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="385" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/CJrkMbQEnbQ" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目二: 41323103" width="716"></iframe></p>
<p>題目三：</p>
<h4><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="688" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/YsVfdL7BdHM" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目三: 41323103" width="1280"></iframe><span>解題流程與心得:</span></h4>
<p><span>將要解決的物理或微積分題目用程式告訴電腦並讓它幫我們算出正確答案，這是我們可以更加快速地得知類似題目的正確答案。</span></p>
<h3>w11_hw</h3>
<p>題目一:</p>
<p><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/01861fbff528ee80bbc9939be3775761/raw/a2e2fea336f808b9fd20f88170a79a85a27de4e1/hw1.py">程式碼</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="688" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/T4PdsQy5kyc" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - w11題目一: 41323103" width="1280"></iframe></p>
<p>題目二:</p>
<p><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/3bb05f19ec9f05f29e34815313bf9339/raw/381a7dc7ed2df2ab6e640f4b36dab24a1d3a1210/hw2.py">程式碼2</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="688" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ayRDx7GtwPk" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - w11題目二: 41323103" width="1280"></iframe></p>
<h4><img alt="" height="307" src="/images/未命名.jpg" width="299"/></h4>
<h4>解題過程與心得:</h4>
<p>我透過chatgpt了解到了老師題目的意義和解決方法，這讓我能更快速的理解題意，也讓我找到更好的解題方法。</p>
<h3>w12_hw</h3>
<p>請各組組員分別利用<span> </span><span>Brython 以及 Jupyter lab</span><span> </span>環境, 執行<a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> </span>notebook 目錄中的<span> </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> </span>筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人<span> </span><span>Gist</span><span> </span>後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得。</p>
<h4>第七題</h4>
<p>07_list_slicing_use</p>
<p>說明：</p>
<p>程式語法：</p>
<p>運用切片(範圍：<code>[start:end]</code>、步長：<code>[start:end:step]</code>）</p>
<p>元素替換(<code>清單[第幾項] = "替換後的項目名稱"</code>)</p>
<p><span>插入(<code>清單[start:end]</code><code>+ ["要插入的項目"] +</code><code> 清單[start:end]</code>)</span></p>
<p><span>添加(<code>清單 + ["要加入的項目"]</code>)</span></p>
<p><span>刪除(<code>del</code>)</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/fcd6aad94772d7f2b81a7f5374a79d87/raw/f436a5d3fd4944b170c0052f48dece30ee889956/w12_hw%25E7%25AC%25AC%25E4%25B8%2583%25E9%25A1%258C">第七題程式碼範例</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義包含五種感官的清單
senses = ["eyes", "nose", "ears", "tongue", "skin"]
print(senses)  # 輸出: ['eyes', 'nose', 'ears', 'tongue', 'skin']

# 修改索引1（第二個元素），將 "nose" 改為 "smell"
senses[1] = "smell"
print(senses)  # 輸出: ['eyes', 'smell', 'ears', 'tongue', 'skin']

# 使用切片修改索引3到4（包含 "tongue" 和 "skin"），將其替換為 "taste" 和 "touch"
senses[3:5] = ["taste", "touch"]
print(senses)  # 輸出: ['eyes', 'smell', 'ears', 'taste', 'touch']

# 使用步長為2的切片，修改索引0、2、4的元素，將其替換為 "sight" 和 "hearing"
senses[0:3:2] = ["sight", "hearing"]
print(senses)  # 輸出: ['sight', 'smell', 'hearing', 'taste', 'touch']

# 定義包含四顆行星的清單
planets = ["Mercury", "Mars", "Earth", "Neptune"]
print(planets)  # 輸出: ['Mercury', 'Mars', 'Earth', 'Neptune']

# 在清單末尾添加 "Jupiter"
planets = planets + ["Jupiter"]
print(planets)  # 輸出: ['Mercury', 'Mars', 'Earth', 'Neptune', 'Jupiter']

# 使用切片將 "Venus" 插入到 "Mars" 和 "Earth" 之間
planets = planets[0:2] + ["Venus"] + planets[2:5]
print(planets)  # 輸出: ['Mercury', 'Mars', 'Venus', 'Earth', 'Neptune', 'Jupiter']

# 在 "Neptune" 後插入 "Uranus" 和 "Saturn"
planets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]
print(planets)  # 輸出: ['Mercury', 'Mars', 'Venus', 'Earth', 'Neptune', 'Uranus', 'Saturn', 'Jupiter']

# 定義一個包含不同房間名稱的清單
house = ["kitchen", "dining room", "living room", "bedroom", "bathroom", "garden", "balcony", "terrace"]
print(house)  # 輸出: ['kitchen', 'dining room', 'living room', 'bedroom', 'bathroom', 'garden', 'balcony', 'terrace']

# 刪除索引1（第二個元素）的 "dining room"
del house[1]
print(house)  # 輸出: ['kitchen', 'living room', 'bedroom', 'bathroom', 'garden', 'balcony', 'terrace']

# 刪除從索引4到5的元素，這是 "garden" 和 "balcony"
del house[4:6]
print(house)  # 輸出: ['kitchen', 'living room', 'bedroom', 'bathroom', 'terrace']

# 使用步長為2的切片，刪除清單中每隔一個的元素（即索引為0、2、4的元素）
del house[::2]
print(house)  # 輸出: ['living room', 'bathroom']

# 刪除整個清單
del house
# 試圖打印已經刪除的清單會引發錯誤
print(house)  # 這會拋出錯誤: NameError: name 'house' is not defined</pre>
<h4><br/>第八題</h4>
<p>08_for_range</p>
<p>說明：</p>
<p>程式語法：</p>
<p>利用索引連接每個項目位置的名稱(<code>for index in range (範圍起點,範圍終點):</code>)</p>
<p><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/fcd6aad94772d7f2b81a7f5374a79d87/raw/32ef69cd3ae7e73e6560cd7bab9f465f8e4ed95e/w12_hw%25E7%25AC%25AC%25E5%2585%25AB%25E9%25A1%258C">第八題程式碼範例</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義朋友的名稱列表
friends = ["Geetha", "Luca", "Daisy", "Juhan"]
# 定義每位朋友的最喜歡的菜餚列表
dishes  = ["sushi", "burgers", "tacos", "pizza"]

# 輸出朋友的名字
print ("My friends' names are:")
print (friends)

# 使用迴圈來列出每個朋友的名字及其索引
for index in range (0,4):
    # 輸出當前索引
    print ("index:  " + str(index))
    # 輸出該索引對應的朋友名字
    print ("friend: " + friends[index])

# 輸出朋友最喜歡的菜餚
print ("Their favorite dishes are:")
print (dishes)

# 使用迴圈來列出每道菜餚及其索引
for index in range (0,4):
    # 輸出當前索引
    print ("index:  " + str(index))
    # 輸出該索引對應的菜餚名稱
    print ("dish: " + dishes[index])

# 使用迴圈來列出每位朋友及他們最喜歡的菜餚的配對
for index in range (0,4):
    # 輸出每位朋友與他們最喜歡的菜餚的配對訊息
    print ("My friend " + friends[index] + "'s favorite dish is " + dishes[index])</pre>
<h4><br/>第九題</h4>
<p>09_for_loop_if_equals</p>
<p>說明：</p>
<p>程式語法：</p>
<p>運用 <code>if</code> 和 <code>else</code> 來區別已特別定義的項目輸出</p>
<p><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/fcd6aad94772d7f2b81a7f5374a79d87/raw/b9746f3f1cd5609e860c171bad46a30e11dc804b/w12_hw%25E7%25AC%25AC%25E4%25B9%259D%25E9%25A1%258C">第九題程式碼範例</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義包含動物名稱的列表
animals = ["giraffe", "penguin", "dolphin"]
# 輸出動物列表
print(animals)

# 使用迴圈遍歷動物列表，顯示每個動物及其位置
for i in range(0, len(animals)):
print("-- Beginning of loop --")
# 顯示當前元素的位置和名稱
print("The element in position " + str(i) + " is " + animals[i])

# 定義你希望看到的動物
wanted_to_see = "penguin"

# 再次遍歷動物列表，尋找是否有你想看到的動物
for i in range(0, len(animals)):
# 如果當前動物是你想看到的動物
if animals[i] == wanted_to_see:
# 顯示你看到了該動物，並且這正是你想看到的動物
print("I saw a " + animals[i] + " and I really wanted to see it!")
# 如果當前動物不是你想看到的動物
else:
# 顯示你看到了這隻動物
print("I saw a " + animals[i])</pre>
<h4><br/>第十題</h4>
<p>10_for_search</p>
<p>說明：</p>
<p>設定變數來篩選出滿足條件的項目</p>
<p>程式語法：</p>
<p>取得字串長度(<code>len</code>)</p>
<p>不等於(<code>!=</code>)</p>
<p>等於(<code>==</code>)</p>
<p>小於(<code>&lt;</code>)</p>
<p>大於(<code>&gt;</code>)</p>
<p>小於等於(<code>&lt;=</code>)</p>
<p>大於等於(<code>&gt;=</code>)</p>
<p><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/fcd6aad94772d7f2b81a7f5374a79d87/raw/5a7960353d2170c7a100671f6b71a2d2685b5507/w12_hw%25E7%25AC%25AC%25E5%258D%2581%25E9%25A1%258C">第十題程式碼範例</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義包含配件名稱的列表
accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]
# 輸出配件列表
print(accessories)

# 遍歷配件列表，顯示每個配件及其位置
for i in range(len(accessories)):
    print("The element " + accessories[i] + " is in position " + str(i))

# 遍歷配件列表，找出字串長度為 6 的配件
for i in range(len(accessories)):
    if len(accessories[i]) == 6:
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")

# 遍歷配件列表，找出字串長度小於 6 的配件
for i in range(len(accessories)):
    if len(accessories[i]) &lt; 6:
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")

# 設定字串長度的閾值為 6，遍歷配件列表，找出字串長度大於 6 的配件
n_of_characters = 6
for i in range(len(accessories)):
    if len(accessories[i]) &gt; n_of_characters:
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")

# 遍歷配件列表，找出字串長度不等於 6 的配件
n_of_characters = 6
for i in range(len(accessories)):
    if len(accessories[i]) != n_of_characters:
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))

# 設定位置閾值為 2，遍歷配件列表，找出位置小於或等於 2 的配件
position = 2
for i in range(len(accessories)):
    if i &lt;= position:
        print("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))

# 設定位置閾值為 2，遍歷配件列表，找出位置大於或等於 2 的配件
position = 2
for i in range(len(accessories)):
    if i &gt;= position:
        print("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position))</pre>
<pre><br/><br/></pre>
<p><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/fcd6aad94772d7f2b81a7f5374a79d87/raw/3f343cf8646886fff3bdc98074b5165623df4898/hw1.py">程式碼</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="385" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/yR2Qak3TXlo" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - w12: 41323103" width="716"></iframe></p>
<h4>解題過程與心得:</h4>
<p>今天我們使用Python來輸出文字，<span>Python的語法比較直白，</span>Python 的 print() 函式是一個基礎又強大的工具，無論是要顯示簡單的訊息，還是格式化輸出複雜的資料，都可以輕鬆實現。我還學習到了如何用for迴圈來排列要輸出的資料。</p>
<h2>w13</h2>
<h3>w13_hw</h3>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['/static/','./../downloads/py/']});  // 設定Brython並加載指定路徑
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python">
from browser import html
from browser import document as doc

canvas = html.CANVAS(width=600, height=600)  # 創建畫布，設置大小為600x600
brython_div = doc["brython_div1"]  # 定位畫布容器
brython_div <= canvas  # 把畫布加入到指定的div中

ctx = canvas.getContext("2d")  # 獲取畫布的2d繪圖上下文

ctx.lineWidth = 1  # 設定畫筆的線寬為1

# 畫藍色對角線
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)  # 開始點為(100, 100)
ctx.lineTo(300, 300)  # 終點為(300, 300)
ctx.stroke()  # 畫線

# 畫紅色的兩個矩形
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)  # 畫第一個矩形，位置(100, 100)，尺寸200x200
ctx.rect(200, 200, 200, 200)  # 畫第二個矩形，位置(200, 200)，尺寸200x200
ctx.stroke()  # 畫線

# 畫黑色的兩個圓形
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)  # 畫圓心為(200, 200)，半徑141.4的圓
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)  # 畫圓心為(300, 300)，半徑141.4的圓
ctx.stroke()
</script>
</p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){
    brython({debug:1,pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python">
from browser import html
from browser import document as doc

# 設置畫布，大小為600x600
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

ctx.lineWidth = 1

# 畫兩個矩形，這些矩形分別位於畫布的不同位置
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)  # 第一個矩形
ctx.rect(200, 200, 200, 200)  # 第二個矩形
ctx.stroke()

# 畫對角線，從(100,100)到(300,300)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓，這些圓分別位於(200,200)和(300,300)，半徑為141.4
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)  # 第一個圓
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)  # 第二個圓
ctx.stroke()

# 檢查點是否在第一個圓內
def point_in_circle1(x, y):
    cx, cy, r = 200, 200, 141.4
    return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2

# 檢查點是否在第二個圓內
def point_in_circle2(x, y):
    cx, cy, r = 300, 300, 141.4
    return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2

# 檢查點是否在第一個矩形內
def point_in_square1(x, y):
    return 100 <= x <= 300 and 100 <= y <= 300

# 檢查點是否在第二個矩形內
def point_in_square2(x, y):
    return 200 <= x <= 400 and 200 <= y <= 400

# 檢查點是否位於對角線下方
def point_below_line(x, y):
    return y > x

# 檢查點是否位於對角線上方
def point_above_line(x, y):
    return y < x

# 檢查點是否在對角線上
def point_on_line(x, y):
    return y == x

# 根據點的位置，返回顏色
def get_region_color(x, y):
    # 如果點不在任一圓內，則不著色
    if not (point_in_circle1(x, y) or point_in_circle2(x, y)):
        return None
    
    # 兩個圓的交集區域，顏色為紅色
    if point_in_circle1(x, y) and point_in_circle2(x, y):
        return "red"  
    
    # 第一個圓內且第一個矩形的上方區域，顏色為綠色
    if point_in_circle1(x, y) and point_in_square1(x, y) and point_above_line(x, y):
        return "green"
    
    # 第一個圓內且第一個矩形的下方區域，顏色為藍色
    if point_in_circle1(x, y) and point_in_square1(x, y) and point_below_line(x, y):
        return "blue"
    
    # 第一個圓內且不在第一個矩形內且在上方區域，顏色為黃色
    if point_in_circle1(x, y) and not point_in_square1(x, y) and y < 100:
        return "yellow"
    
    # 第一個圓內且不在第一個矩形內且在下方區域，顏色為橙色
    if point_in_circle1(x, y) and not point_in_square1(x, y) and y > 300:
        return "orange"
    
    # 第二個圓內且第二個矩形內部，顏色為紫色
    if point_in_circle2(x, y) and point_in_square2(x, y):
        return "purple"
    
    # 第二個圓內且在第二個矩形上方區域，顏色為粉紅色
    if point_in_circle2(x, y) and not point_in_square2(x, y) and y < 200:
        return "pink"
    
    # 第二個圓內且在第二個矩形下方區域，顏色為灰色
    if point_in_circle2(x, y) and not point_in_square2(x, y) and y > 400:
        return "gray"

    # 第二個圓內且不在第二個矩形內且位於左方區域，顏色為棕色
    if point_in_circle2(x, y) and not point_in_square2(x, y) and x < 200:
        return "brown"

    # 第二個圓內且不在第二個矩形內且位於右方區域，顏色為青色
    if point_in_circle2(x, y) and not point_in_square2(x, y) and x > 400:
        return "cyan"
    
    # 第一個圓內且在第一個矩形右方區域，顏色為淺綠色
    if point_in_circle1(x, y) and not point_in_square1(x, y) and x > 300:
        return "lightgreen"

    # 第二個圓內且在第二個矩形左方區域，顏色為深藍色
    if point_in_circle2(x, y) and not point_in_square2(x, y) and x < 200:
        return "darkblue"
    
    # 第一個矩形與第二個矩形的交集區域，顏色為淺黃色
    if point_in_square1(x, y) and point_in_square2(x, y):
        return "lightyellow"
    
    # 左邊圓形最左側區域，這部分是您遺漏的區域，顏色為淺粉紅色
    if point_in_circle1(x, y) and not point_in_square1(x, y) and x < 100:
        return "lightpink"
    
    return None

# 扫描每个像素并根据位置着色
def scan_and_draw():
    # 掃描每一個像素點，根據位置決定顏色
    for y in range(0, canvas.height, 1):  # y從0到畫布高度
        for x in range(0, canvas.width, 1):  # x從0到畫布寬度
            color = get_region_color(x, y)  # 根據位置獲取顏色
            if color:  # 如果該點有顏色
                ctx.fillStyle = color  # 設置顏色
                ctx.beginPath()
                ctx.arc(x + 1, y + 1, 1, 0, 2 * 3.14)  # 用圓點標示
                ctx.fill()

# 開始掃描並繪製顏色
scan_and_draw()
</script>
</p>
<div id="brython_div1">外框：</div>
<div><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/478c10990107ce8c766e379a6b1e56ad/raw/ceebc6c7f9b6df6f073f038d8445705c2699cee2/%25E5%25A4%2596%25E6%25A1%2586.py">外框程式碼</a></div>
<div></div>
<div>上色：</div>
<div><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/478c10990107ce8c766e379a6b1e56ad/raw/ceebc6c7f9b6df6f073f038d8445705c2699cee2/%25E4%25B8%258A%25E8%2589%25B2.py">上色程式碼</a></div>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="688" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/syGLPY-ZuCk" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - w13_hw： 41323103" width="1280"></iframe></p>
<h4>作業心得：</h4>
<p><span>通過具體的條件問題問chetgpt，來逐步得到更完整、更符合題目所需的程式，過程中可能會應為提問不夠具體或不完整導致chetgpt給出的程式沒有到達預期的效果。</span></p>
<h3>w14_ex</h3>
<p><span>請根據兩個圓繪圖所圍成的</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務。</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/6b08b1926838f5085bbe18988bfd269f/raw/717e681bc1a2e828fa2455736b57f0cef5c40fca/%25E4%25B8%2589%25E5%2580%258B%25E5%259C%2593.py">程式範例</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    # 創建 canvas 並設置寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
    
    # 獲取 canvas 的 2D 上下文
    ctx = canvas.getContext("2d")
    
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    # 初始化畫布
    canvas, ctx = initialize_canvas(400, 400)
    
    # 清除畫布
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    # 顏色區域存儲
    color_dict = {}

    # 使用掃描線方法填充區域
    for py in range(0, canvas.height):
        # 逐行掃描，判斷每個點是否在圓內
        current_color = None  # 當前掃描線區域的顏色
        for px in range(0, canvas.width):
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
            
            if in_circle1 and in_circle2 and in_circle3:
                # 三個圓的交集區域
                if "intersection" not in color_dict:
                    color_dict["intersection"] = random_color_generator()
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 只有圓1和圓2的交集
                if "circle1_circle2" not in color_dict:
                    color_dict["circle1_circle2"] = random_color_generator()
                current_color = color_dict["circle1_circle2"]
            elif in_circle2 and in_circle3:
                # 只有圓2和圓3的交集
                if "circle2_circle3" not in color_dict:
                    color_dict["circle2_circle3"] = random_color_generator()
                current_color = color_dict["circle2_circle3"]
            elif in_circle1 and in_circle3:
                # 只有圓1和圓3的交集
                if "circle1_circle3" not in color_dict:
                    color_dict["circle1_circle3"] = random_color_generator()
                current_color = color_dict["circle1_circle3"]
            elif in_circle1:
                # 只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 點不在三個圓內，畫外區域
                current_color = "white"  # 背景色白色

            # 填充顏色
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 直接設定圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 100, 100  # 圓3：圓心 (200, 100)，半徑 100

# 呼叫畫圓函式
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)</pre>
<p><br/><br/></p>
<h2>w15</h2>
<p><span><strong>題目一</strong>：</span></p>
<p><span>請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式。</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/07d4648cec75558f7710f3cf72730062/raw/82a8584f7e670123f1ffe22d927e30f3234144ba/%25E9%25A1%258C%25E7%259B%25AE%25E4%25B8%2580%25EF%25BC%259A%25E5%25BE%259E%25201%2520%25E7%25B4%25AF%25E5%258A%25A0%25E5%2588%25B0%2520100">從 1 累加到 100</a></p>
<p>設計思考：</p>
<ul>
<li>初始化總和：用一個變數來儲存累加的結果。變數一開始是 0，因為累加操作是從零開始的。</li>
<li>累加過程：使用 <code>for</code> 迴圈來遍歷從 1 到 100 的所有整數，並將它們加到總和中。</li>
<li>顯示結果：將累加的結果輸出到螢幕上，告訴使用者總和是多少。</li>
</ul>
<pre><strong></strong><em></em>執行過程：<br/>執行時，程式會從 1 開始，逐一將每個數字加到 <code>total</code> 中。這樣當 <code>i</code> 從 1 迴圈到 100 時，<br/><code>total</code> 就會累加所有數字的和。當迴圈結束時，<code>total</code> 的值為 5050（1 + 2 + 3 + ... + 100），<br/>並將這個結果顯示出來。</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化總和，設定為 0
total = 0

# 使用 for 迴圈從 1 累加到 100
for i in range(1, 101):
    # 將當前的數字 i 加到 total 中
    total += i

# 顯示結果，輸出從 1 到 100 累加的總和
print("從 1 累加到 100 的總和是:", total)
</pre>
<pre><span><strong>題目二：<br/></strong>延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果。(以"addto"作為連結標題)<br/></span></pre>
<pre><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/07d4648cec75558f7710f3cf72730062/raw/82a8584f7e670123f1ffe22d927e30f3234144ba/%25E9%25A1%258C%25E7%259B%25AE%25E4%25BA%258C%25EF%25BC%259Aaddto(1,%2520100)">addto<br/></a><span><br/>設計思考：<br/>這段程式的目的是設計一個函式 <code>addto(start, end)</code>，它能夠計算並返回從 <code>start</code> 到 <code>end</code> 之間所有數字的總和。<br/>利用循環來進行累加，這樣的設計可以使得我們對任何範圍的數字進行總和計算，而不僅限於從 1 到 100。<br/><br/></span>執行過程：<br/>首先需要初始化一個總和變數 <code>total</code>，並將其設為 0。<br/>接著通過 <code>for</code> 迴圈遍歷從 <code>start</code> 到 <code>end</code>（包含 <code>end</code>）的所有數字，每次迴圈都將當前的數字加到 <code>total</code>。<br/>當迴圈結束時，<code>total</code> 將儲存範圍內所有數字的總和，我們會將這個值返回。<br/>呼叫該函式來計算範圍內的總和並顯示結果。</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義函式 addto，接受兩個參數 start 和 end
def addto(start, end):
    # 初始化總和，設為 0
    total = 0
    
    # 使用 for 迴圈從 start 累加到 end (包含 end)
    for i in range(start, end + 1):
        # 每次將當前數字 i 加到 total
        total += i
    
    # 返回累加的結果 total
    return total

# 呼叫 addto 函式，計算從 1 到 100 的總和，並將結果儲存到 result 變數中
result = addto(1, 100)

# 顯示結果，輸出從 1 到 100 的總和
print("從 1 累加到 100 的總和是:", result)</pre>
<pre><span><strong>題目三：<br/></strong>延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果。<br/>頁面中請以 </span><span>add_only_even 作為連結標題。<br/><br/></span><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/07d4648cec75558f7710f3cf72730062/raw/82a8584f7e670123f1ffe22d927e30f3234144ba/%25E9%25A1%258C%25E7%259B%25AE%25E4%25B8%2589%25EF%25BC%259Aadd_only_even(1,%2520100)">add_only_even</a></pre>
<pre><span>設計思考：<br/>這段程式的目的是設計一個函式 <code>add_only_even(start, end)</code>，該函式能夠計算並返回從 <code>start</code> 到 <code>end</code> 範圍內所有偶數的總和。<br/>為了確保只累加偶數，需要對每個數字進行檢查，並在符合條件的情況下才將其加到總和中。<br/><br/></span>執行過程：<br/>初始化總和：需要初始化一個變數 <code>total</code> 來儲存累加結果，初始值設定為 0。<br/>遍歷數字範圍：使用 <code>for</code> 迴圈遍歷從 <code>start</code> 到 <code>end</code> 之間的所有數字。每次迴圈都會檢查當前數字是否為偶數。<br/>檢查偶數：使用 <code>if i % 2 == 0</code> 來檢查當前數字 <code>i</code> 是否為偶數。若是偶數，將其加到總和中。<br/>返回結果：計算完畢後，返回總和 <code>total</code>，並將結果顯示在螢幕上。</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義函式 add_only_even，接受兩個參數 start 和 end
def add_only_even(start, end):
    # 初始化總和，將 total 設為 0
    total = 0
    
    # 使用 for 迴圈從 start 到 end (包含 end)，進行累加
    for i in range(start, end + 1):
        # 檢查當前的數字 i 是否為偶數（即 i 除以 2 的餘數為 0）
        if i % 2 == 0:
            # 如果 i 是偶數，將它加到總和 total 中
            total += i
    
    # 返回最終的累加總和
    return total

# 呼叫函式 add_only_even，計算從 1 到 100 的偶數總和
result = add_only_even(1, 100)

# 顯示結果，輸出從 1 到 100 的偶數總和
print("從 1 累加到 100 的偶數總和是:", result)
</pre>
<pre><br/><span><strong>題目四：</strong><br/>延伸上題, 設計一個函式 add_avoid_8(1, 100),可以完成從第一個輸入整數,累加到第二個輸入變數的累加過程,必須避開數字出現"8"的整數,<br/>頁面中請以 add_avoid_8 作為連結標題。<br/><br/></span><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/07d4648cec75558f7710f3cf72730062/raw/82a8584f7e670123f1ffe22d927e30f3234144ba/%25E9%25A1%258C%25E7%259B%25AE%25E5%259B%259B%25EF%25BC%259Aadd_avoid_8(1,%2520100)">add_avoid_8</a><br/><br/></pre>
<pre><span>設計思考：<br/>這段程式的目的是設計一個函式 <code>add_avoid_8(start, end)</code>，該函式能夠計算從 <code>start</code> 到 <code>end</code> 範圍內所有不包含數字 '8' 的整數的總和。<br/>為了達到這個目標，我們需要對每個數字進行檢查，看看它的數字是否包含 '8'，如果包含，則跳過該數字，否則將其加到總和中。<br/><br/></span></pre>
<pre>執行過程：<br/>初始化總和：我們需要初始化一個變數 <code>total</code> 來儲存累加結果，初始值設定為 0。<br/>遍歷數字範圍：使用 <code>for</code> 迴圈遍歷從 <code>start</code> 到 <code>end</code> 之間的每個數字。<br/>檢查數字是否包含 '8'：使用 <code>if '8' not in str(i)</code> 來檢查當前數字 <code>i</code> 是否包含字符 '8'。這是將數字轉換為字串並檢查是否包含該字符的一種方法。<br/>加總不包含 '8' 的數字：如果該數字不包含 '8'，則將它加到總和中。<br/>返回結果：計算完畢後，返回累加總和 <code>total</code>，並將結果顯示在螢幕上。</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義函式 add_avoid_8，接受兩個參數 start 和 end
def add_avoid_8(start, end):
    # 初始化總和，設為 0
    total = 0
    
    # 使用 for 迴圈從 start 累加到 end (包含 end)
    for i in range(start, end + 1):
        # 檢查當前的數字 i 是否包含 '8'（將數字轉為字串後檢查）
        if '8' not in str(i):
            # 如果數字 i 不包含 '8'，則將它加到 total 中
            total += i
    
    # 返回最終的累加總和
    return total

# 呼叫 add_avoid_8 函式，計算從 1 到 100 的總和，避開包含 '8' 的數字
result = add_avoid_8(1, 100)

# 顯示結果，輸出從 1 到 100 的總和（避開包含 '8' 的數字）
print("從 1 累加到 100 的總和（避開包含 '8' 的數字）是:", result)
</pre>
<p></p>
<p><strong>各題目的心得：</strong></p>
<p>題目 1：從 1 累加到 100</p>
<p>心得<strong>：</strong> 這是最基本的累加題目，目的是理解如何使用迴圈來進行數字的累加。我學會了如何使用 <code>for</code> 迴圈來遍歷數字範圍，並使用 <code>+=</code> 運算符將每個數字加到總和中。這個過程中，最重要的是理解 <code>range(start, end + 1)</code> 的用法，它使得我們能夠包括結束數字 <code>end</code>。</p>
<p>題目 2：設計 addto 函式（從 start 累加到 end）</p>
<p>心得<strong>：</strong> 這題讓我學會了如何將相同的操作封裝成一個函式。定義函式 <code>addto(start, end)</code> 可以讓我重複使用這段程式碼來計算不同範圍的總和。函式使得程式更具可重用性，並且有助於組織和結構化程式碼。在這裡，使用了傳遞參數的概念，讓我們能夠根據需要決定起始和結束的數字。</p>
<p>題目 3：設計 add_only_even 函式（只加偶數）</p>
<p>心得： 這題使我進一步掌握了條件判斷的使用。使用 <code>if i % 2 == 0</code> 來篩選出偶數，這是運用數學運算符來進行篩選的例子。這個題目讓我了解了如何根據特定條件對數字進行篩選和處理。這也加深了我對 <code>for</code> 迴圈的理解，因為在這個過程中，我需要在迴圈中檢查每個數字是否滿足偶數的條件。</p>
<p>題目 4：設計 add_avoid_8 函式（避開包含 8 的數字）</p>
<p>心得<strong>：</strong> 這題增加了更多的挑戰，要求我們在進行累加的過程中排除包含特定字符（'8'）的數字。這讓我學會了如何將數字轉換為字串進行操作。<code>str(i)</code> 讓我們能夠將數字轉換成字串並檢查是否包含字符 '8'。這個題目不僅強化了條件判斷的概念，還讓我學會了如何處理數字的字符串表示。在這裡還運用了 <code>if '8' not in str(i)</code> 的方式來過濾數字。</p>
<pre></pre>
<pre><span><strong></strong></span></pre>
<pre></pre>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['/static/','./../downloads/py/']});  // 設定Brython並加載指定路徑
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python">
from browser import html
from browser import document as doc

# 創建畫布 (canvas)，並設置其大小為 2000x150 像素
canvas = html.CANVAS(width = 2000, height = 150)
# 取得 HTML 中 id 為 brython_div1 的元素，這樣可以把畫布放置到這個元素中
brython_div = doc["brython_div1"]
# 將畫布添加到 HTML 頁面中的指定元素中
brython_div <= canvas

# 取得畫布的 2D 繪圖上下文，這樣我們才能在畫布上繪製圖形
ctx = canvas.getContext("2d")

# 設置畫筆的寬度為 2 像素，這樣我們畫的線會較粗
ctx.lineWidth = 2
# 設置畫筆的顏色為黑色
ctx.strokeStyle = "black"

# 繪製 X 軸 (從原點 (31, 3) 向右延伸到 (88, 3))
ctx.beginPath()  # 開始繪製新的路徑
ctx.moveTo(31, 3)  # 移動畫筆到原點座標 (31, 3)
ctx.lineTo(88, 3)  # 畫一條線到座標 (88, 3)
ctx.stroke()  # 完成繪製並顯示這條線

# 繪製 Y 軸 (從原點 (31, 3) 向下延伸到 (31, 95))
ctx.beginPath()  # 開始繪製新的路徑
ctx.moveTo(31, 3)  # 移動畫筆到原點座標 (31, 3)
ctx.lineTo(31, 95)  # 畫一條線到座標 (31, 95)
ctx.stroke()  # 完成繪製並顯示這條線

# 設置字體樣式為 20px 的 Arial 字型，並設置文字顏色為黑色
ctx.font = "20px Arial"
ctx.fillStyle = "black"

# 在畫布上 (90, 25) 位置添加文字 "+X"，表示 X 軸的正方向
ctx.fillText("+X", 90, 25)

# 在畫布上 (20, 110) 位置添加文字 "+Y"，表示 Y 軸的正方向
ctx.fillText("+Y", 20, 110)

# 更改字體樣式為 12px 的 Arial 字型，用來標示原點座標
ctx.font = "12px Arial"
ctx.fillStyle = "black"
# 在 (35, 20) 位置顯示文字 "(31, 3)"，這是原點的座標，並偏移 X 軸位置來避免與 Y 軸重疊
ctx.fillText("(31, 3)", 35, 20)

# 設置位移偏移量，x 和 y 變數對應原點座標 (31, 3)
x = 31
y = 3

# 繪製橙色六邊形，所有的座標都是基於原點 (31, 3) 計算的
ctx.beginPath()  # 開始繪製六邊形
ctx.fillStyle = "#EBB000"  # 設置填充顏色為橙色
# 設置六邊形的六個頂點位置，基於 (x, y) 原點進行偏移
ctx.moveTo(x + 40, y + 70)  # 六邊形的第一個頂點
ctx.lineTo(x + 60, y + 40)  # 第二個頂點
ctx.lineTo(x + 90, y + 40)  # 第三個頂點
ctx.lineTo(x + 110, y + 70)  # 第四個頂點
ctx.lineTo(x + 90, y + 100)  # 第五個頂點
ctx.lineTo(x + 60, y + 100)  # 第六個頂點
ctx.closePath()  # 關閉路徑，使六邊形封閉
ctx.fill()  # 填充六邊形的顏色

# 繪製綠色菱形
ctx.beginPath()  # 開始繪製菱形
ctx.fillStyle = "#2CB05F"  # 設置填充顏色為綠色
# 設置菱形的四個頂點位置
ctx.moveTo(x + 130, y + 70)  # 菱形的第一個頂點
ctx.lineTo(x + 150, y + 40)  # 第二個頂點
ctx.lineTo(x + 170, y + 70)  # 第三個頂點
ctx.lineTo(x + 150, y + 100)  # 第四個頂點
ctx.closePath()  # 關閉路徑，將菱形閉合
ctx.fill()  # 填充菱形

# 繪製藍色三角形 (頂點在菱形的右側，並朝下)
ctx.beginPath()  # 開始繪製三角形
ctx.fillStyle = "#73B7FF"  # 設置填充顏色為藍色
# 設置三角形的三個頂點位置
ctx.moveTo(x + 174, y + 70)  # 頂點在菱形右側
ctx.lineTo(x + 154, y + 100)  # 左下角
ctx.lineTo(x + 194, y + 100)  # 右下角
ctx.closePath()  # 關閉路徑，將三角形閉合
ctx.fill()  # 填充三角形

# 繪製粉紅色圓形
ctx.beginPath()  # 開始繪製圓形
ctx.fillStyle = "#FF458C"  # 設置填充顏色為粉紅色
# 設置圓形的圓心座標為 (x + 220, y + 70)，半徑為 20
ctx.arc(x + 220, y + 70, 20, 0, 2 * 3.14159)  # 畫圓
ctx.fill()  # 填充圓形

# 繪製黃色正方形
ctx.beginPath()  # 開始繪製正方形
ctx.fillStyle = "#EBDF00"  # 設置填充顏色為黃色
# 設置正方形的位置和大小，左上角為 (x + 260, y + 43)，大小為 40x40
ctx.rect(x + 260, y + 43, 40, 40)  # 畫正方形
ctx.fill()  # 填充正方形

# 繪製藍色矩形
ctx.beginPath()  # 開始繪製矩形
ctx.fillStyle = "#004A99"  # 設置填充顏色為藍色
# 設置矩形的位置和大小，左上角為 (x + 320, y + 53)，大小為 60x20
ctx.rect(x + 320, y + 53, 60, 20)  # 畫矩形
ctx.fill()  # 填充矩形
</script>
</p>
<p><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/2f7776c16ac37df4560795e71bab09dc/raw/1290b2720eb15d79d1e7cac42195e9927ffbd826/w16_exam1">座標圖形程式範例</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/e2sD97YBRgQ" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - w16_exam1: 41323103" width="653"></iframe></p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p>
<script src="/static/brython.js">
</script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['/static/','./../downloads/py/']});  // 設定Brython並加載指定路徑
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python">
from browser import html
from browser import document as doc

# 創建 canvas 元素，並設置畫布的寬度和高度為 1000x250 像素
canvas = html.CANVAS(width=1000, height=250)
brython_div = doc["brython_div1"]  # 取得在 HTML 中 id 為 "brython_div1" 的元素
brython_div <= canvas  # 把 canvas 元素添加到指定的 div 中

# 獲取 canvas 元素的 2D 渲染上下文 (context)，這樣就能在畫布上進行繪圖操作
ctx = canvas.getContext("2d")

# 定義一個簡化的繪製直線的函數，這樣可以方便地多次使用
def draw_line(x1, y1, x2, y2, line_width=2, stroke_style="black"):
    """
    繪製一條直線，從 (x1, y1) 到 (x2, y2)，可設置線條寬度和顏色
    """
    ctx.lineWidth = line_width  # 設定線條的寬度
    ctx.strokeStyle = stroke_style  # 設定線條的顏色
    ctx.beginPath()  # 開始繪製路徑
    ctx.moveTo(x1, y1)  # 把畫筆移動到起始點 (x1, y1)
    ctx.lineTo(x2, y2)  # 繪製一條線條，從 (x1, y1) 到 (x2, y2)
    ctx.stroke()  # 進行繪製，顯示線條

# 定義一個繪製文本的函數
def draw_text(text, x, y, font="20px Arial", fill_style="black"):
    """
    在畫布上繪製文本，設置字體、顏色以及文本的位置
    """
    ctx.font = font  # 設置字體樣式
    ctx.fillStyle = fill_style  # 設置文本顏色
    ctx.fillText(text, x, y)  # 在 (x, y) 位置繪製文本

# 繪製 L 形的線條，這是一個簡單的 L 形結構
def draw_l_shape(x, y):
    """
    繪製 L 形的兩條線條
    第一條線從 (x, y) 到 (x + 76, y) — 水平線
    第二條線從 (x, y) 到 (x, y + 90) — 垂直線
    """
    draw_line(x, y, x + 76, y)  # 繪製水平線
    draw_line(x, y, x, y + 90)  # 繪製垂直線

# 繪製紅色短線，這兩條短線用來強調指定的點
def draw_red_short_lines(x, y):
    """
    繪製兩條紅色的短線，用來標記 (x, y) 的位置
    第一條是從 (x, y) 向下 1 像素的紅色短線
    第二條是從 (x, y) 向右 1 像素的紅色短線
    """
    draw_line(x, y, x, y + 1, line_width=5, stroke_style="red")  # 繪製垂直的紅色短線
    draw_line(x, y, x + 1, y, line_width=5, stroke_style="red")  # 繪製水平的紅色短線

# 繪製藍色的六邊形多邊形
def draw_blue_polygon():
    """
    繪製一個由 6 條藍色線條組成的封閉多邊形
    這個多邊形的每一條邊都是藍色的
    """
    # 各條邊的坐標順序
    draw_line(130, 130, 170, 130, stroke_style="blue")  # 第一條邊
    draw_line(190, 130, 230, 130, stroke_style="blue")  # 第二條邊
    draw_line(230, 130, 230, 230, stroke_style="blue")  # 第三條邊
    draw_line(230, 230, 190, 230, stroke_style="blue")  # 第四條邊
    draw_line(170, 230, 130, 230, stroke_style="blue")  # 第五條邊
    draw_line(130, 230, 130, 130, stroke_style="blue")  # 第六條邊

# 繪製矩形內部的藍色線條，這些線條在矩形內部創建更多的小區域
def draw_inner_lines_in_rectangle():
    """
    繪製矩形內部的藍色線條，形成更多的小區域
    """
    # 這些線條是繪製在 (150, 150) 和 (210, 230) 之間的區域
    draw_line(150, 150, 210, 150, stroke_style="blue")  # 上邊
    draw_line(210, 150, 210, 170, stroke_style="blue")  # 右邊
    draw_line(170, 150, 170, 170, stroke_style="blue")  # 中間的垂直線
    draw_line(170, 170, 130, 170, stroke_style="blue")  # 下邊
    draw_line(190, 170, 190, 190, stroke_style="blue")  # 內部短垂直線
    draw_line(190, 190, 210, 190, stroke_style="blue")  # 內部短水平線
    draw_line(210, 190, 210, 230, stroke_style="blue")  # 右邊
    draw_line(170, 170, 150, 170, stroke_style="blue")  # 左邊
    draw_line(150, 210, 150, 190, stroke_style="blue")  # 內部左邊
    draw_line(150, 190, 190, 190, stroke_style="blue")  # 內部底部
    draw_line(170, 230, 170, 210, stroke_style="blue")  # 內部右邊
    draw_line(170, 210, 190, 210, stroke_style="blue")  # 內部右側底部

# 主函數，負責調用所有繪圖函數來執行繪製操作
def main():
    """
    主函數，負責調用各種繪圖函數來完成圖形的繪製
    """
    # 繪製 L 形線條，起始位置為 (31, 3)
    draw_l_shape(31, 3)

    # 繪製紅色短線條，強調 (31, 3) 的位置
    draw_red_short_lines(31, 3)

    # 繪製文本 "(31,3)"，並將其放置在適當的 y 位置，避免與其他圖形重疊
    draw_text("(31,3)", 40, 35, font="20px Arial", fill_style="red")

    # 繪製藍色的多邊形
    draw_blue_polygon()

    # 繪製矩形內部的藍色線條，創建更多的小區域
    draw_inner_lines_in_rectangle()

# 調用主函數，執行所有繪圖操作
main()
</script>
</p>
<p><a href="https://mdecp2024.github.io/hw-41323103/content/Brython.html?src=https://gist.githubusercontent.com/41323103/2f7776c16ac37df4560795e71bab09dc/raw/1290b2720eb15d79d1e7cac42195e9927ffbd826/w16_exam2">迷宮程式範例</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="688" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/IJ9IKSWoJRs" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - w16_exam2: 41323103" width="1280"></iframe></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3><span>w16_exam3</span></h3>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>